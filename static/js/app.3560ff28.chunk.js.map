{"version":3,"sources":["colors.tsx","App.tsx"],"names":["theme","App","useState","working","setWorking","text","setText","toDos","setToDos","useEffect","console","log","loadTodos","saveToDos","toSave","a","async","AsyncStorage","setItem","JSON","stringify","getItem","s","parse","w","View","style","styles","container","StatusBar","header","TouchableOpacity","onPress","save","activeOpacity","Text","fontSize","fontWeight","color","TextInput","input","placeholder","onChangeText","payload","value","onSubmitEditing","newTodos","Date","now","returnKeyType","ScrollView","Object","keys","map","key","todo","todoText","Platform","OS","confirm","Alert","alert","deleteToDo","Fontisto","name","size","StyleSheet","create","flex","backgroundColor","paddingHorizontal","justifyContent","flexDirection","marginTop","paddingVertical","borderRadius","marginVertical","marginBottom","alignItems"],"mappings":"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","file":"static/js/app.3560ff28.chunk.js","sourcesContent":["type Theme = {\r\n  bg: string,\r\n  grey: string,\r\n  todoBg: string,\r\n}\r\n\r\nexport const theme:Theme = {\r\n  bg: 'black',\r\n  grey: '#3A3D40',\r\n  todoBg: \"#5C5C60\",\r\n}\r\n\r\n","import React, {useState, useEffect} from 'react';\nimport { StatusBar } from 'expo-status-bar';\nimport { \n  StyleSheet, \n  Text, \n  View, \n  TouchableOpacity, \n  TouchableHighlight, \n  TouchableWithoutFeedback,\n  Pressable, \n  TextInput,\n  ScrollView,\n  Alert,\n  Platform,\n} from 'react-native';\nimport { theme } from './colors';\nimport { Fontisto } from '@expo/vector-icons'; \nimport AsyncStorage from '@react-native-async-storage/async-storage';\nconst STORAGE_KEY:string = \"@toDos\";\nconst WORKING_KEY:string = \"@working\";\n\nexport default function App() {\n  const [working, setWorking] = useState(true);\n  const [text, setText] = useState('');\n  // type Todos = { a:number; { text: string, work:boolean}}\n  const [toDos,setToDos] = useState({});\n  useEffect(() => {\n    console.log('useEffect 실행');\n    loadTodos();\n  }, []);\n  const work = async () => {\n    setWorking(true);\n    await AsyncStorage.setItem(WORKING_KEY, 'true');\n    let save = await AsyncStorage.getItem(WORKING_KEY);\n    console.log(save)\n  };\n  const travel = async () => {\n    setWorking(false);\n    await AsyncStorage.setItem(WORKING_KEY, 'false');\n    let save = await AsyncStorage.getItem(WORKING_KEY);\n    console.log(save)\n  };\n  const onChangeText = (payload:string) => setText(payload);\n  const saveToDos = async (toSave:any) => {\n    await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\n  };\n  const loadTodos = async () => {\n    const s = await AsyncStorage.getItem(STORAGE_KEY);\n    if (typeof s === 'string') {\n      setToDos(JSON.parse(s));\n    }\n    const w = await AsyncStorage.getItem(WORKING_KEY);\n    setWorking(w==='true' ? true : false);\n    console.log('working >>', working)\n  };\n  const addTodo = async () => {\n    if (text === '') {\n      return; \n    }\n    // const newTodos = Object.assign(\n    //   {}, \n    //   toDos, \n    //   {[Date.now()]: { text, work: working}}\n    // );\n    const newTodos = { \n      ...toDos,\n      [Date.now()] : { text, working},\n    };\n    setToDos(newTodos);\n    await saveToDos(newTodos);\n    setText('');\n  };\n  console.log('toDos >>', toDos);\n  const deleteToDo = (key) => {\n    if (Platform.OS === 'web') {\n      const ok = confirm('이 목록 지울래요?')\n      if (ok) {\n        const newTodos = { ...toDos };\n        delete newTodos[key];\n        setToDos(newTodos);\n        saveToDos(newTodos);\n        setText('');\n      }\n    } else {\n      Alert.alert(\n        '진짜 지울려구?',\n        '즈응말?',\n        [\n          {text: 'cancel'},\n          {\n            text: 'sure!',\n            onPress: async () => {\n              const newTodos = { ...toDos };\n              delete newTodos[key];\n              setToDos(newTodos);\n              await saveToDos(newTodos);\n              setText('');\n            }\n          }\n        ],\n      );\n    };\n  }\n  \n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"auto\" />\n      <View style={styles.header}>\n        <TouchableOpacity\n          onPress={work}\n          activeOpacity={0}\n          >\n          <Text style={{ fontSize: 44, fontWeight: \"600\", color: working ? \"white\" : theme.grey}}>Work</Text>\n        </TouchableOpacity>\n        <TouchableOpacity\n          onPress={travel}\n        >\n          <Text style={{ fontSize: 44, fontWeight: \"600\", color: !working ? \"white\" : theme.grey}}>Travel</Text>\n        </TouchableOpacity>\n      </View>\n      <TextInput \n        style={styles.input}\n        placeholder={working ? \"할일을 입력하세요\" : \"어디로 갈래요?\"}\n        onChangeText={onChangeText}\n        value={text}\n        onSubmitEditing={addTodo}\n        returnKeyType=\"done\"\n      />\n      <ScrollView>\n        {Object.keys(toDos).map((key) => {\n          return (\n            toDos[key].working === working ? (\n              <View style={styles.todo} key={key}>\n                <Text style={styles.todoText}>{toDos[key].text}</Text>\n                <TouchableOpacity onPress={() => deleteToDo(key)}>\n                  <Fontisto name=\"trash\" size={16} color={theme.todoBg} />\n                </TouchableOpacity>\n              </View>\n            ) : null\n          )}\n        )}\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: theme.bg,\n    paddingHorizontal: 20,\n  },\n  header: {\n    justifyContent: \"space-between\",\n    flexDirection: 'row',\n    marginTop: 100,\n  },\n  input: {\n    backgroundColor: \"white\",\n    paddingVertical: 15,\n    paddingHorizontal: 20,\n    borderRadius: 20,\n    marginVertical: 20,\n    fontSize: 18,\n  },\n  todo: {\n    backgroundColor: theme.grey,\n    marginBottom: 10,\n    paddingVertical: 20,\n    paddingHorizontal: 40,\n    borderRadius: 15,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  },\n  todoText: {\n    color: 'white',\n    fontSize: 16,\n    fontWeight: \"500\",\n  },\n});\n"],"sourceRoot":""}